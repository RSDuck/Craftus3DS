.gsh point c0

; Uniforms
.fvec projection[4]
.fvec modelView[4]

; Constants
.constf myconst(0.0, 1.0, 0.00392156862, 0.001)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones

; Outputs
.out outpos     position
; .out outuv	    texcoord0
.out outclr     color

; Inputs
.alias inoffset 	v0
.alias indu 		v1
.alias indv 		v2
.alias inuv 		v3
.alias inlight		v4
.alias inbface		v5

.entry gmain
.proc gmain
	; r5: Position auf der Axis(relativ zu inoffset)
	; r6, r7: Wert um den erhöht wird (inc)
	max r6, ones, indu
	max r7, ones, indv

	mov r5, zeros ; Der tatsächlichen Vektor

	; r8: Maximum schleifen Wert
	dp3 r8.x, ones, indu
	dp3 r8.y, ones, indv

	mov r9, zeros ; Zähler auf der U Achse

	mov r12, zeros ; Speicher für den Startvektor

	nextQuadV:
		nextQuadU:
			call buildQuad ; Das Quadrat machen

			add r5, r5, r6 ; Tatsächlichen Wert zum Vektor dazurechnen

			add r9.x, ones, r9.x ; Den U Achsen Zähler erhöhen
			cmp r9.x, lt, lt, r8.x
			jmpc cmp.x, nextQuadU

	add r5, r12, r7 ; Wert auf der U Achse zurück setzen, V um einen erhöhen
	mov r12, r5 ; Neuen Startwert speichern

	mov r9.x, zeros ; Zähler für die U Achse resetten

	add r9.y, ones, r9.y
	cmp r9.y, lt, lt, r8.y
	jmpc cmp.x, nextQuadV

    end
.end

; 
.proc buildQuad
	add r0.xyz, inoffset, r5 ; Unten links
	add r1.xyz, r0, r6 ; Oben rechts
	add r2.xyz, r1, r7 ; Oben Rechts
	add r3.xyz, r0, r7 ; Unten Rechts

	setemit 0
	mov r10, r0
	call processVertex

	mov outclr.xyz, inlight.xxx
	mov outclr.w, ones
	emit

	setemit 1
	mov r10, r1
	call processVertex

	mov outclr.xyz, inlight.yyy
	mov outclr.w, ones
	emit

	cmp ones, gt, gt, inbface
	ifc cmp.x ; Wenn die Vorderseite gerendert wird
		setemit 2 prim
	.else ; Wenn die Rückseite gerendert wird
		setemit 2, inv prim
	.end

	mov r10, r2
	call processVertex

	mov outclr.xyz, inlight.zzz
	mov outclr.w, ones
	emit

	setemit 0
	mov r10, r3
	call processVertex

	mov outclr.xyz, inlight.www
	mov outclr.w, ones
	emit

	setemit 1
	mov r10, r0
	call processVertex

	mov outclr.xyz, inlight.xxx
	mov outclr.w, ones
	emit

	cmp ones, gt, gt, inbface
	ifc cmp.x ; Wenn die Vorderseite gerendert wird
		setemit 2, prim
	.else ; Wenn die Rückseite gerendert wird
		setemit 2, inv prim
	.end

	mov r10, r2
	call processVertex

	mov outclr.xyz, inlight.yyy
	mov outclr.w, ones
	emit

.end

; takes r10 and multiplies it by MVP and puts it into the output registers
.proc processVertex
	mov r10.w, ones

	dp4 r11.x, modelView[0], r10
	dp4 r11.y, modelView[1], r10
	dp4 r11.z, modelView[2], r10
	dp4 r11.w, modelView[3], r10

	dp4 outpos.x, projection[0], r11
	dp4 outpos.y, projection[1], r11
	dp4 outpos.z, projection[2], r11
	dp4 outpos.w, projection[3], r11
.end
