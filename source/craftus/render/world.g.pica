.gsh point c0

; Uniforms
.fvec projection[4]
.fvec modelView[4]

; Constants
.constf myconst(0.0, 1.0, 0.00392156862, 0.001)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones

; Outputs
.out out_position	position
; .out outuv	    texcoord0
.out out_color		color
; .out out_normal		normal

; Inputs
.alias in_pointA		v0
.alias in_pointB		v1
.alias in_uvOffset		v2
.alias in_brightness	v3

.entry gmain
.proc gmain
	; a = in_pointA
	; b = r0
	; c = in_pointB
	; d = r1
	
	; d +--/+ c
	;   | / |
	; a +/--| b

	mov r0, in_pointA
	mov r1, in_pointA

	cmp in_pointA.y, eq, eq, in_pointB.y
	ifc cmp.x
		mov r0.x, in_pointB.x
		mov r1.z, in_pointB.z
	.else
		mov r0.xz, in_pointB.xz
		mov r1.y, in_pointB.y
	.end

	; Kreuzprodukt
	;mov r4, in_pointB
	;mul r2.xyz, in_pointA.yzx, r4.zxy
	;mul r3.xyz, in_pointA.zxy, r4.yzx
	;sub r4, r2, r3
	;dp3 r2, ones, r4
	;rsq r3, r2


	setemit 0
	mov r10, in_pointA
	call processVertex

	mov out_color.xyz, in_brightness.xxx
	mov out_color.w, ones
	emit

	setemit 1
	mov r10, r0
	call processVertex

	mov out_color.xyz, in_brightness.yyy
	mov out_color.w, ones
	emit

	setemit 2, prim
	mov r10, in_pointB
	call processVertex

	mov out_color.xyz, in_brightness.zzz
	mov out_color.w, ones
	emit
	
	setemit 0
	mov r10, in_pointA
	call processVertex

	mov out_color.xyz, in_brightness.xxx
	mov out_color.w, ones
	emit

	setemit 1
	mov r10, in_pointB
	call processVertex

	mov out_color.xyz, in_brightness.zzz
	mov out_color.w, ones
	emit

	setemit 2, prim
	mov r10, r1
	call processVertex

	mov out_color.xyz, in_brightness.www
	mov out_color.w, ones
	emit

    end
.end

; takes r10 and multiplies it by MVP and puts it into the output registers
.proc processVertex
	mov r10.w, ones

	dp4 r11.x, modelView[0], r10
	dp4 r11.y, modelView[1], r10
	dp4 r11.z, modelView[2], r10
	dp4 r11.w, modelView[3], r10

	dp4 out_position.x, projection[0], r11
	dp4 out_position.y, projection[1], r11
	dp4 out_position.z, projection[2], r11
	dp4 out_position.w, projection[3], r11
.end
